[tool.poetry]
name = "syncdreamer"
version = "0.1.0"
description = "SyncDreamer: Learning to Generate Multiview-consistent Images from a Single-view Image"
authors = ["SyncDreamer Team"]
readme = "README.md"
license = "MIT"
packages = [{include = "ldm"}, {include = "renderer"}, {include = "raymarching"}]

[tool.poetry.dependencies]
python = "^3.8.1"
pytorch-lightning = "1.9.0"
Pillow = "10.0.0"
opencv-python = "*"
transformers = "*"
taming-transformers-rom1504 = "*"
tqdm = "*"
numpy = "*"
kornia = "*"
webdataset = "*"
omegaconf = "*"
einops = "*"
scikit-image = "*"
pymcubes = "*"
carvekit-colab = "*"
open3d = "*"
trimesh = "*"
easydict = "*"
nerfacc = "*"
imageio-ffmpeg = "0.4.7"
clip = {git = "https://github.com/openai/CLIP.git"}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.4.0"
toml = "^0.10.2"

[tool.poetry.scripts]
test = "pytest:main"
tests = "pytest:main"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "-vv",
    "--tb=short",
    "--maxfail=1",
]
markers = [
    "unit: marks tests as unit tests (fast, isolated)",
    "integration: marks tests as integration tests (slower, may require external resources)",
    "slow: marks tests as slow running",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["ldm", "renderer", "raymarching"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/distutils/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/setup.py
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100
skip_glob = ["*/setup.py"]
skip = [".git", "__pycache__", ".venv", "venv", "build", "dist"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"